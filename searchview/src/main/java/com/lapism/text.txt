    <attr name="drawerArrowStyle" format="reference" />
    <!--
   <style name="SearchDrawerArrowToggle" parent="SearchDrawerArrowToggle.Base">
    </style>

    <item name="drawerArrowStyle">@style/Widget.AppCompat.DrawerArrowToggle</item>-->

        <style name="SearchDrawerArrowToggle2">
            <item name="search_color">@android:color/black</item>
            <item name="search_spinBars">true</item>
            <item name="search_thickness">2dp</item>
            <item name="search_arrowHeadLength">8dp</item>
            <item name="search_arrowShaftLength">16dp</item>
            <item name="search_barLength">18dp</item>
            <item name="search_gapBetweenBars">3dp</item>
            <item name="search_drawableSize">24dp</item>
        </style>

        <declare-styleable name="SearchDrawerArrowToggle">
            <attr name="search_color" format="color"/>
            <attr name="search_spinBars" format="boolean"/>
            <attr name="search_thickness" format="dimension"/>
            <attr name="search_arrowHeadLength" format="dimension"/>
            <attr name="search_arrowShaftLength" format="dimension"/>
            <attr name="search_barLength" format="dimension"/>
            <attr name="search_gapBetweenBars" format="dimension"/>
            <attr name="search_drawableSize" format="dimension"/>
        </declare-styleable>

                final TypedArray a = context.getTheme().obtainStyledAttributes(null, R.styleable.SearchDrawerArrowToggle, R.attr.drawerArrowStyle, R.style.SearchDrawerArrowToggle2);
        setColor(a.getColor(R.styleable.SearchDrawerArrowToggle_search_color, 0));        a.recycle();

        package com.lapism.searchview.arrow;


        interface DrawerToggle {

            void setPosition(float position);

        }
        implements DrawerToggle



        /*@FloatRange(from = 0.0, to = 1.0)
    public float getProgress() {
        return mProgress;
    }*/

//@IntDef({ARROW_DIRECTION_LEFT, ARROW_DIRECTION_RIGHT, ARROW_DIRECTION_START, ARROW_DIRECTION_END})
//@Retention(RetentionPolicy.SOURCE)

//public @interface ArrowDirection {}


save to database
 persistent main search
 hide show after search
 back pressed

 /*
 public class MainActivity2 extends AppCompatActivity implements SeekBar.OnSeekBarChangeListener {

     private SearchArrowDrawable mSlider;

     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.dfn);

         Toolbar toolbar = (Toolbar) findViewById(R.id.my_awesome_toolbar);
         toolbar.setTitleTextColor(Color.WHITE);
         setSupportActionBar(toolbar);

         mSlider = new SearchArrowDrawable(this);
         mSlider.setVerticalMirror(true);
         mSlider.setColor(ContextCompat.getColor(this, android.R.color.holo_green_dark));

         //ImageView imageView = (ImageView) findViewById(R.id.my_awesome_image_view);

        // imageView.setImageDrawable(mSlider);



 /*

 drawerArrow.setProgress(0f); // normal position
 drawerArrow.setProgress(1f); // back arrow position
 drawerArrow.setColor(R.color.drawer_color); // to set color

  */

 //mSlider.setPosition(1f);
 //mSlider.setPosition(0f);
 //  drawerArrow.setProgress(0f); // normal position0.0
 //  drawerArrow.setProgress(1f); // back arrow position
 //drawerDrawable = new SearchArrowDrawable(this);
 //mSlider.setPosition(Math.min(1f, Math.max(0, slideOffset)));
 /*
         SeekBar seek = (SeekBar) findViewById(R.id.my_awesome_seek_bar);
         seek.setOnSeekBarChangeListener(this);
     }

     @Override
     public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
         float mProgress = progress / 100f;
         mSlider.setProgress(mProgress);
     }

     @Override
     public void onStartTrackingTouch(SeekBar seekBar) {

     }

     @Override
     public void onStopTrackingTouch(SeekBar seekBar) {

     }

    public void setAnimateEnabled(boolean enabled) {
         this.animateEnabled = enabled;
     }
 }*/

 @Override
 public void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.activity_swipe_behavior);
     mCardView = (CardView) findViewById(R.id.swipe_card);

     final SwipeDismissBehavior<CardView>
           swipe = new SwipeDismissBehavior();

     swipe.setSwipeDirection(
          SwipeDismissBehavior.SWIPE_DIRECTION_ANY);

     swipe.setListener(
          new SwipeDismissBehavior.OnDismissListener() {

          @Override
          public void onDismiss(View view) {
                Toast.makeText(Activity.this,
                       "Card swiped !!", Toast.LENGTH_SHORT).show();
          }
       );

       LayoutParams coordinatorParams =
            (LayoutParams) mCardView.getLayoutParams();

        coordinatorParams.setBehavior(swipe);
 }ï»¿

 /**
  * To work on unit tests, switch the Test Artifact in the Build Variants view.
  */
 public class ExampleUnitTest {
     @Test
     public void addition_isCorrect() {
         assertEquals(4, 2 + 2);
     }
 }

 /**
  * <a href="http://d.android.com/tools/testing/testing_android.html">Testing Fundamentals</a>
  */
 public class ApplicationTest extends ApplicationTestCase<Application> {
     public ApplicationTest() {
         super(Application.class);
     }
 }

 <?xml version="1.0" encoding="utf-8"?>
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     app:layout_behavior="@string/appbar_scrolling_view_behavior"
     tools:context=".ToolbarActivity"
     tools:showIn="@layout/toolbar">

     <include
         layout="@layout/nav_header_toolbar"
         android:layout_width="match_parent"
         android:layout_height="match_parent" />

 </RelativeLayout>







 private Toolbar mActionBarToolbar;

     protected Toolbar getActionBarToolbar() {
         if (mActionBarToolbar == null) {
             mActionBarToolbar = (Toolbar) findViewById(R.id.toolbar_actionbar);
             if (mActionBarToolbar != null) {
                 // Depending on which version of Android you are on the Toolbar or the ActionBar may be
                 // active so the a11y description is set here.
                 mActionBarToolbar.setNavigationContentDescription(getResources().getString(R.string
                         .nav_drawer_description_a11y));
                 setSupportActionBar(mActionBarToolbar);
             }
         }
         return mActionBarToolbar;
     }

     @Override
     public void setContentView(int layoutResID) {
         super.setContentView(layoutResID);
         getActionBarToolbar();
     }


 Color Control Highlight
 selectable item borderless
 Toolbar toolbar = getActionBarToolbar();